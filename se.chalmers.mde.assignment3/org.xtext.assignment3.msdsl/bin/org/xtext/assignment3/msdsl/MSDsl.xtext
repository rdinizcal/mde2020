// automatically generated by Xtext
grammar org.xtext.assignment3.msdsl.MSDsl with org.eclipse.xtext.common.Terminals

import "com.chalmers.manufacturingSystem" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ManufacturingSystem returns ManufacturingSystem:
	'ManufacturingSystem'
	name=EString
	'{'
		'start' '(' start+=[StoragePoint|EString] ( "," start+=[StoragePoint|EString])* ')' 
		'end' '(' end+=[StoragePoint|EString] ( "," end+=[StoragePoint|EString])* ')' 
		('responsible' responsible=[Responsible|EString])?
		'consistsOf' '{' consistsOf+=ManufacturingSystemElement ( "," consistsOf+=ManufacturingSystemElement)* '}'  
//		('uses' '{' uses+=WorkPieceType ( "," uses+=WorkPieceType)* '}' )?		
		('workPieceTypes' '{' uses+=WorkPieceType ( "," uses+=WorkPieceType)* '}' )?
//		('transforms' '{' transforms+=WorkPiece ( "," transforms+=WorkPiece)* '}' )?
		('initialWorkPieces' '{' transforms+=WorkPiece ( "," transforms+=WorkPiece)* '}' )?
		('staff' '{' staff+=Responsible ( "," staff+=Responsible)* '}' )?
	'}';

ManufacturingSystemElement returns ManufacturingSystemElement:
	ManufacturingSystemElement_Impl | ManufacturingStep | TransportStep | QualityAssuranceStep | StoragePoint | CompositeManufacturingStep;





InputCondition returns InputCondition:
	InputCondition_Impl | WorkPieceCondition | BinaryCondition | Negation;


ManufacturingSystemElement_Impl returns ManufacturingSystemElement:
	{ManufacturingSystemElement}
	'ManufacturingSystemElement'
	name=EString
	'{'
//		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('transition' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* )?
		('responsible' responsible=[Responsible|EString])?
	'}';

StoragePoint returns StoragePoint:
	{StoragePoint}
	'StoragePoint'
	name=EString
	'{'
//		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('transition' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* )?
		('responsible' responsible=[Responsible|EString])?
		('stores' '(' stores+=[WorkPieceType|EString] ( "," stores+=[WorkPieceType|EString])* ')' )?
	'}';
	
Responsible returns Responsible:
	{Responsible}
//	'Responsible'
	name=EString;
	
WorkPieceType returns WorkPieceType:
	{WorkPieceType}
//	'WorkPieceType'
	name=EString;

WorkPiece returns WorkPiece:
	'WorkPiece'
//	'{'
		'of' 'type' hasType=[WorkPieceType|EString]
//	'}'
	;

EString returns ecore::EString:
	STRING | ID;

ManufacturingStep returns ManufacturingStep:
	'ManufacturingStep'
	name=EString
	'{'
		('speed' speed=EInt)?
//		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('transition' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* )?
		('responsible' responsible=[Responsible|EString])?
//		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'inputConditions' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'transforms' '{' output+=OutputDecision ( "or" output+=OutputDecision)* '}'
	'}';

TransportStep returns TransportStep:
	'TransportStep'
	name=EString
	'{'
		('speed' speed=EInt)?
//		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('transition' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* )?
		('responsible' responsible=[Responsible|EString])?
//		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'inputConditions' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'transports' '{' output+=OutputDecision ( "or" output+=OutputDecision)* '}' 
	'}';

QualityAssuranceStep returns QualityAssuranceStep:
	'QualityAssuranceStep'
	name=EString
	'{'
		('speed' speed=EInt)?
//		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('transition' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* )?
		('responsible' responsible=[Responsible|EString])?
//		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'inputConditions' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'verifies' '{' output+=OutputDecision ( "or" output+=OutputDecision)* '}'
	'}';

CompositeManufacturingStep returns CompositeManufacturingStep:
	'CompositeManufacturingStep'
	name=EString
	'{'
		('speed' speed=EInt)?
//		('transition' '(' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* ')' )?
		('transition' transition+=[ManufacturingSystemElement|EString] ( "," transition+=[ManufacturingSystemElement|EString])* )?
		('responsible' responsible=[Responsible|EString])?
//		'input' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'inputConditions' '{' input+=InputCondition ( "," input+=InputCondition)* '}' 
		'transforms' '{' output+=OutputDecision ( "or" output+=OutputDecision)* '}'
		'contains' contains=ManufacturingSystem
	'}';

EInt returns ecore::EInt:
	'-'? INT;

InputCondition_Impl returns InputCondition:
	{InputCondition}
	'InputCondition'
	name=EString;

OutputDecision returns OutputDecision:
//	'OutputDecision'
//	'{'
//		('outputTypes' outputTypes=[WorkPieceType|EString])?

//		'input' '(' input+=[InputCondition|EString] ( "," input+=[InputCondition|EString])* ')'
		input+=[InputCondition|EString] ( "," input+=[InputCondition|EString])*
		'into' (outputTypes=[WorkPieceType|EString])?
		 
//	'}'
	;

WorkPieceCondition returns WorkPieceCondition:
	'WorkPieceCondition'
	name=EString
//	'{'
//		'requiresType' requiresType=[WorkPieceType|EString]
//	'}'
	'ofType' requiresType=[WorkPieceType|EString]
	;

BinaryCondition returns BinaryCondition:
	'BinaryCondition'
     (name=EString)? // one may need a name if she desires to create nested expressions
	'{'
//		'type' type=BinaryType
//		'left' left=[InputCondition|EString]
//		'right' right=[InputCondition|EString]
		left=[InputCondition|EString] type=BinaryType right=[InputCondition|EString]
	'}'
	;

Negation returns Negation:
//	'Negation'
//   name=EString - rm because it is pointless, we do not refer to this object later on
//	'{'
//		'contains' contains=[InputCondition|EString]
//	'}'
	'!' contains=[InputCondition|EString];

enum BinaryType returns BinaryType:
				and = 'and' | or = 'or';
